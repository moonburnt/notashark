#!/usr/bin/env python3

## notashark - discord bot for King Arthur's Gold
## Copyright (c) 2021 moonburnt
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see https://www.gnu.org/licenses/gpl-3.0.txt

import notashark
import argparse
import threading
from os import environ
from sys import exit
import logging

BOT_NAME = notashark.configuration.BOT_NAME
DEFAULT_SERVERLIST_UPDATE_TIME = notashark.configuration.SERVERLIST_UPDATE_TIME
DEFAULT_SETTINGS_AUTOSAVE_TIME = notashark.configuration.SETTINGS_AUTOSAVE_TIME

log = logging.getLogger('notashark')
log.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter(fmt='[%(asctime)s][%(name)s][%(levelname)s] %(message)s',
                                       datefmt='%d.%m.%y %H:%M:%S'))
log.addHandler(handler)

ap = argparse.ArgumentParser()
ap.add_argument("--token",
    help="Alternative way to supply your token to bot, in case envars arent available",
    type=str)
ap.add_argument("--debug", help=f"Add debug messages to {BOT_NAME}'s output", action="store_true")
ap.add_argument("--serverlist-update-time",
    help="Custom lengh (in seconds) of pause between requests to api in order "
    "to get fresh info about active servers with players on them. Also used to "
    "autoupdate related embed. Could not be less than default value, which is "
   f"{DEFAULT_SERVERLIST_UPDATE_TIME} seconds", type=int)
ap.add_argument("--settings-autosave-time",
    help="Custom lengh (in seconds) of pause between autosaving per-server "
    "settings on disk. Could not be less than default value, which is "
    f"{DEFAULT_SETTINGS_AUTOSAVE_TIME} seconds", type=int)
args = ap.parse_args()

if args.debug:
    log.setLevel(logging.DEBUG)

if args.token:
    BOT_TOKEN = args.token
else:
    try:
        BOT_TOKEN = environ['NOTASHARK_DISCORD_KEY']
    except KeyError:
        log.critical("You didnt specify your discord bot's token! Please, either "
                     "set NOTASHARK_DISCORD_KEY environment variable, or pass it "
                     "via --token launch argument!\nAbort")
        exit(1)

if (args.serverlist_update_time and
   (args.serverlist_update_time > DEFAULT_SERVERLIST_UPDATE_TIME)):
    notashark.configuration.SERVERLIST_UPDATE_TIME = args.serverlist_update_time
log.info("Serverlist update time has been set to "
        f"{notashark.configuration.SERVERLIST_UPDATE_TIME} seconds")

if (args.settings_autosave_time and
   (args.settings_autosave_time > DEFAULT_SETTINGS_AUTOSAVE_TIME)):
    notashark.configuration.SETTINGS_AUTOSAVE_TIME = args.settings_autosave_time
log.info("Settings autosave time has been set to "
        f"{notashark.configuration.SETTINGS_AUTOSAVE_TIME} seconds")

log.debug(f"Launching data fetcher")
#daemon=True allows to shutdown this thing in case of emergency right away
dft = threading.Thread(target=notashark.data_fetcher._serverlist_autoupdater, daemon=True)
dft.start()

log.debug(f"Launching settings autosaver")
sat = threading.Thread(target=notashark.settings_fetcher._settings_autosaver)
sat.start()

log.debug(f"Launching {BOT_NAME}")
try:
    notashark.discord_bot.bot.run(BOT_TOKEN)
except discord.errors.LoginFailure:
    log.critical("Invalid token error: double-check the value of "
                 "NOTASHARK_DISCORD_KEY environment variable.\nAbort")
    exit(1)
